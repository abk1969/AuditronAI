#!/bin/bash
set -e

echo "üîç V√©rification de l'environnement de production..."

# V√©rifier les d√©ploiements
check_deployments() {
    echo "V√©rification des d√©ploiements..."
    
    DEPLOYMENTS=(
        "auditronai-backend"
        "auditronai-frontend"
        "prometheus"
        "grafana"
    )
    
    for deployment in "${DEPLOYMENTS[@]}"; do
        if kubectl get deployment $deployment -o jsonpath='{.status.readyReplicas}' > /dev/null; then
            echo "‚úÖ D√©ploiement $deployment op√©rationnel"
        else
            echo "‚ùå D√©ploiement $deployment non disponible"
            return 1
        fi
    done
}

# V√©rifier le monitoring
check_monitoring() {
    echo "V√©rification du monitoring..."
    
    if curl -s http://prometheus:9090/-/healthy | grep -q "Prometheus"; then
        echo "‚úÖ Prometheus op√©rationnel"
    else
        echo "‚ùå Prometheus non disponible"
        return 1
    fi
    
    if curl -s http://grafana:3000/api/health | grep -q "ok"; then
        echo "‚úÖ Grafana op√©rationnel"
    else
        echo "‚ùå Grafana non disponible"
        return 1
    fi
}

# V√©rifier les sauvegardes
check_backups() {
    echo "V√©rification des sauvegardes..."
    
    if velero get backup | grep -q "Completed"; then
        echo "‚úÖ Syst√®me de sauvegarde op√©rationnel"
    else
        echo "‚ùå Probl√®me avec les sauvegardes"
        return 1
    fi
}

# V√©rifier les m√©triques
check_metrics() {
    echo "V√©rification des m√©triques..."
    
    # V√©rifier le taux d'erreur
    ERROR_RATE=$(curl -s http://prometheus:9090/api/v1/query?query=sum(rate(http_requests_total{status=~"5.."}[5m]))/sum(rate(http_requests_total[5m])))
    if (( $(echo "$ERROR_RATE < 0.05" | bc -l) )); then
        echo "‚úÖ Taux d'erreur acceptable"
    else
        echo "‚ùå Taux d'erreur trop √©lev√©"
        return 1
    fi
    
    # V√©rifier la latence
    LATENCY=$(curl -s http://prometheus:9090/api/v1/query?query=histogram_quantile(0.95,sum(rate(http_request_duration_seconds_bucket[5m]))by(le)))
    if (( $(echo "$LATENCY < 2" | bc -l) )); then
        echo "‚úÖ Latence acceptable"
    else
        echo "‚ùå Latence trop √©lev√©e"
        return 1
    fi
}

# Ex√©cuter toutes les v√©rifications
check_deployments
check_monitoring
check_backups
check_metrics

echo "‚úÖ V√©rification de l'environnement de production termin√©e avec succ√®s" 