#!/bin/bash
set -e

# Ce script configure les procÃ©dures de maintenance automatisÃ©e pour AuditronAI
# Il met en place :
# - Des fenÃªtres de maintenance planifiÃ©es
# - Des mises Ã  jour automatiques des dÃ©pendances
# - Des nettoyages pÃ©riodiques des ressources
# - Des vÃ©rifications de santÃ© post-maintenance

echo "ðŸ”§ Configuration de la maintenance..."

# CrÃ©er le dossier de maintenance
mkdir -p maintenance/{scripts,logs,reports}

# Script de mise Ã  jour des dÃ©pendances
cat > maintenance/scripts/update-dependencies.sh << EOF
#!/bin/bash
set -e

# Met Ã  jour les dÃ©pendances Python et npm
# VÃ©rifie la compatibilitÃ© avant mise Ã  jour
# CrÃ©e un rapport de mise Ã  jour
# Effectue des tests de rÃ©gression post-mise Ã  jour

echo "ðŸ“¦ Mise Ã  jour des dÃ©pendances..."
poetry update --dry-run
cd frontend && npm outdated
cd ..

# Mise Ã  jour avec tests de rÃ©gression
poetry update
cd frontend && npm update && npm test
cd ..

echo "âœ… DÃ©pendances mises Ã  jour avec succÃ¨s"
EOF

# Script de nettoyage
cat > maintenance/scripts/cleanup.sh << EOF
#!/bin/bash
set -e

# Nettoie les ressources inutilisÃ©es :
# - Logs anciens
# - Caches
# - Images Docker obsolÃ¨tes
# - Sauvegardes expirÃ©es

echo "ðŸ§¹ Nettoyage du systÃ¨me..."

# Nettoyage des logs
find ./logs -type f -mtime +30 -delete

# Nettoyage Docker
docker system prune -af --volumes

# Nettoyage des caches
rm -rf .cache/*
cd frontend && npm cache clean --force
cd ..

echo "âœ… Nettoyage terminÃ© avec succÃ¨s"
EOF

chmod +x maintenance/scripts/*.sh

echo "âœ… Configuration de la maintenance terminÃ©e avec succÃ¨s"

# Pour utiliser ce script :
# 1. ./setup-maintenance.sh
# 2. Les scripts de maintenance seront disponibles dans maintenance/scripts/
# 3. Planifier les scripts avec cron pour une exÃ©cution automatique

# Cette configuration assure :
# - Des mises Ã  jour rÃ©guliÃ¨res et sÃ©curisÃ©es
# - Un systÃ¨me propre et optimisÃ©
# - Une traÃ§abilitÃ© des opÃ©rations de maintenance 