#!/bin/bash
set -e

echo "üîç V√©rification de la configuration des tests..."

# V√©rifier PyTest
check_pytest() {
    echo "V√©rification de PyTest..."
    if [ -f "pytest.ini" ]; then
        pytest --collect-only
        echo "‚úÖ Configuration PyTest valid√©e"
    else
        echo "‚ùå Configuration PyTest manquante"
        return 1
    fi
}

# V√©rifier Cypress
check_cypress() {
    echo "V√©rification de Cypress..."
    if [ -f "frontend/cypress.config.ts" ]; then
        cd frontend
        npx cypress verify
        echo "‚úÖ Configuration Cypress valid√©e"
        cd ..
    else
        echo "‚ùå Configuration Cypress manquante"
        return 1
    fi
}

# V√©rifier k6
check_k6() {
    echo "V√©rification de k6..."
    if [ -f "tests/performance/k6/load-test.js" ]; then
        k6 inspect tests/performance/k6/load-test.js
        echo "‚úÖ Configuration k6 valid√©e"
    else
        echo "‚ùå Configuration k6 manquante"
        return 1
    fi
}

# V√©rifier Lighthouse CI
check_lighthouse() {
    echo "V√©rification de Lighthouse CI..."
    if [ -f "lighthouserc.js" ]; then
        lhci healthcheck
        echo "‚úÖ Configuration Lighthouse CI valid√©e"
    else
        echo "‚ùå Configuration Lighthouse CI manquante"
        return 1
    fi
}

# V√©rifier la couverture des tests
check_coverage() {
    echo "V√©rification de la couverture des tests..."
    
    # Tests unitaires
    pytest --cov=AuditronAI tests/unit/
    
    # Tests d'int√©gration
    pytest tests/integration/
    
    # Tests E2E
    cd frontend && npx cypress run
    
    # Tests de performance
    k6 run tests/performance/k6/load-test.js --duration 30s --vus 10
    
    echo "‚úÖ Couverture des tests valid√©e"
}

# Ex√©cuter toutes les v√©rifications
check_pytest
check_cypress
check_k6
check_lighthouse
check_coverage

echo "‚úÖ V√©rification des tests termin√©e avec succ√®s" 